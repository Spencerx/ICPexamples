name: Examples pull request checks

on:
  pull_request:
    branches:
      - master

jobs:
  check-example-changes:
    name: Check example folders for changes
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_examples: ${{ steps.set-matrix.outputs.has_examples }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch all branches
        run: git fetch origin

      - name: Set matrix based on changes
        id: set-matrix
        run: |
          changed_files=$(git diff --name-only origin/main ${{ github.sha }})
          echo "Changed files: $changed_files"

          examples=()
          declare -A example_paths=(
            ["My Crypto Blog (Frontend)"]="hosting/my_crypto_blog"
            ["React (Frontend)"]="hosting/react"
            ["Motoko backend (Motoko)"]="motoko/backend_only"
            ["Daily Planner (Motoko)"]="motoko/daily_planner"
            ["EVM Block Explorer (Motoko)"]="motoko/evm_block_explorer"
            ["FileVault (Motoko)"]="motoko/filevault"
            ["Flying Ninja (Motoko)"]="motoko/flying_ninja"
            ["Hello World (Motoko)"]="motoko/hello_world"
            ["LLM Chatbot (Motoko)"]="motoko/llm_chatbot"
            ["Tokenmania (Motoko)"]="motoko/tokenmania"
            ["Who Am I (Motoko)"]="motoko/who_am_i"
            ["Rust backend (Rust)"]="rust/backend_only"
            ["Daily Planner (Rust)"]="rust/daily_planner"
            ["EVM Block Explorer (Rust)"]="rust/evm_block_explorer"
            ["Flying Ninja (Rust)"]="rust/flying_ninja"
            ["Hello World (Rust)"]="rust/hello_world"
            ["LLM Chatbot (Rust)"]="rust/llm_chatbot"
            ["Tokenmania (Rust)"]="rust/tokenmania"
            ["Who Am I (Rust)"]="rust/who_am_i"
          )
          for name in "${!example_paths[@]}"; do
            path=${example_paths[$name]}
            echo "Checking path: $path"
            
            if echo "$changed_files" | grep -q "^$path/"; then
              examples+=("{\"name\": \"$name\", \"path\": \"$path\"}")
              echo "Added example: $name with path $path"
            else
              if echo "$changed_files" | grep -q "^\.github/workflows/provision_"; then
                examples+=("{\"name\": \"$name\", \"path\": \"$path\"}")
                echo "Added example: $name with path $path (due to provision workflow change)"
              fi
            fi
          done

          if [ ${#examples[@]} -eq 0 ]; then
            echo "No examples detected. Setting has_examples to false."
            echo "has_examples=false" >> $GITHUB_OUTPUT
            echo "matrix={\"example\": []}" >> $GITHUB_OUTPUT
          else
            matrix="{\"example\": [$(IFS=, ; echo "${examples[*]}")]}"
            echo "Matrix generated: $matrix"
            echo "has_examples=true" >> $GITHUB_OUTPUT
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          fi

  build-examples:
    name: Build updated examples (${{ matrix.environment }} environment)
    needs: check-example-changes
    if: needs.check-example-changes.outputs.has_examples == 'true'
    runs-on: ubuntu-22.04
    container: ${{ matrix.environment == 'container' && 'ghcr.io/dfinity/icp-dev-env-slim:17' || null }}
    strategy:
      matrix:
        example: ${{ fromJson(needs.check-example-changes.outputs.matrix).example }}
        environment: ['container', 'bare-ubuntu']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Start dfx
        run: dfx start --background

      - name: Build project
        working-directory: ${{ matrix.example.path }}
        run: |
          if [ -f "Makefile" ]; then
            make test
          else
            npm install
            dfx deploy
          fi
